#!/bin/bash

#
# This script is designed to allow you to fetch changes from an
# upstream/{main,master} branch on a remote repository (identified by 'upstream')
# and apply those changes to a local {main,master} branch, without having to
# check out the {main,master} branch
#
# If you put this script in bin (on your PATH), you can call it as:
# git upm
#
# This script was modified from the one found at:
# http://stackoverflow.com/questions/4156957/merging-branches-without-checkout.
#

_print() {
    echo -ne "$1" 1>&2
}

_usage() {
    echo "Usage: git upm  <or>  git-upm" 1>&2
    exit 1
}

_not_from_main() {
    echo "WARNING: this command should not be run from the \"$(git rev-parse --abbrev-ref HEAD)\" branch"
    exit 2
}

_merge_ff() {
    main="$1"
    upstream="$2"
    main_ref="refs/heads/$main"
    upstream_ref="refs/remotes/$upstream"
    upstream_orig_hash="$(git show-ref -s --verify $upstream_ref 2> /dev/null)"
    if [ $? -ne 0 ]; then
        _print "upm: WARN: unknown branch refs/remotes/$upstream"
        _usage
    fi

    upstream_new_hash="$(git show-ref -s --verify $upstream_ref 2> /dev/null)"
    if [ "$upstream_new_hash" != "$upstream_orig_hash" ]; then
        _print "upm: Upstream changed from "
        _print "${upstream_orig_hash:0:7} to ${upstream_new_hash:0:7}\n"
    fi

    main_orig_hash="$(git show-ref -s --verify $main_ref 2> /dev/null)"
    if [ $? -ne 0 ]; then
        _print "upm: WARN: unknown branch $main\n"
        _usage
    fi

    if [ "$main_orig_hash" == "$upstream_new_hash" ]; then
        _print "upm: $main is up-to-date at ${main_orig_hash:0:7}\n"
    else
        temp_hash="$(git merge-base $main_orig_hash $upstream_new_hash)"
        if [ "$temp_hash" != "$main_orig_hash" ]; then
            _print "upm: WARN: merging $upstream into $main "
            _print "would not be a fast-forward\n"
            return 1
        fi
        _print "upm: Updating ${main} "
        _print "${main_orig_hash:0:7}..${upstream_new_hash:0:7}\n"
        msg="merge $upstream: Fast forward"
        new="$upstream_new_hash"
        orig="$main_orig_hash"
        if git update-ref -m "$msg" "$main_ref" "$new" "$orig"; then
            if [ -z $quiet ]; then
                _print "upm: Fast forward\n"
                git --no-pager diff --stat "$main@{1}" "$main"
            fi
        else
            _print "upm: WARN: fast forward using update-ref failed\n"
        fi
    fi
}

_for_each_head() {
    _print "upm: Fetching upstream ...\n"
    git fetch upstream
    heads=$(git for-each-ref refs/heads --format="%(refname:short)")
    for head in ${heads}
    do
        git show-ref -q upstream/$head
        EC=$?
        if [ "$EC" == "0" ]; then
            _merge_ff $head upstream/$head
        fi
    done

}

while getopts "q" opt; do
    case $opt in
        q ) quiet="-q";;
        * ) ;;
    esac
done
shift $((OPTIND-1))

branch=$(git rev-parse --abbrev-ref HEAD)
if [ "$branch" == "main" ] || [ "$branch" == "master" ]; then
    _not_from_main
fi

case $# in
    0 ) _for_each_head;;
    * ) _usage
esac

