
#
# Utilities for adding/removing paths from PATH
# taken from http://stackoverflow.com/q/370047
#
path_append ()  { path_remove $1; export PATH="$PATH:$1"; }
path_prepend () { path_remove $1; export PATH="$1:$PATH"; }
path_remove ()  { export PATH=`echo -n $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`; }

# Directory where you store your repositories
REPO_ROOT=~/Documents/Repos

#
# Remove all exising repo directories from PATH
#
remove_repos () {
    IFS=':' read -ra PATHS <<< "$PATH"
    for path in "${PATHS[@]}"; do
        if [[ "$path" = ${REPO_ROOT}* ]]
        then
            path_remove $path
        fi
    done
}

# Use an alias instead of the function directly so that PATH is updated in callers context
alias g="go_to"

#
# Move into a repository and add its local node_modules/.bin to path
#
function go_to () {
    remove_repos
    path_prepend ${REPO_ROOT}/$1/node_modules/.bin
    cd ${REPO_ROOT}/$1
}

# auto-complete function for allowing tab-completion for projects
_go_to_complete () {
    local cur=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=( $(compgen -W "`/bin/ls ${REPO_ROOT}`" -- $cur) )
}

complete -F _go_to_complete go_to
complete -F _go_to_complete g

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###
